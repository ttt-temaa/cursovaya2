import json
from unittest.mock import Mock, patch

from pandas import DataFrame

from src.services import (
    simple_search,
    simple_search_local,
    sort_by_phone_numbers_main,
    sort_by_phone_numbers_local
)


@patch("pandas.read_excel")
def test_simple_search(mock_reader: Mock) -> None:
    mock_reader.return_value = DataFrame(
        [
            {
                "Дата операции": "12.03.2019 17:27:35",
                "Дата платежа": "15.03.2019",
                "Номер карты": "*7197",
                "Статус": "OK",
                "Сумма операции": -127.0,
                "Валюта операции": "RUB",
                "Сумма платежа": -127.0,
                "Валюта платежа": "RUB",
                "Кэшбэк": "",
                "Категория": "Транспорт",
                "MCC": 4121.0,
                "Описание": "Яндекс Такси",
                "Бонусы (включая кэшбэк)": 2,
                "Округление на инвесткопилку": 0,
                "Сумма операции с округлением": 127.0,
            },
            {
                "Дата операции": "12.03.2019 16:51:05",
                "Дата платежа": "13.03.2019",
                "Номер карты": "*7197",
                "Статус": "OK",
                "Сумма операции": -55.0,
                "Валюта операции": "RUB",
                "Сумма платежа": -55.0,
                "Валюта платежа": "RUB",
                "Кэшбэк": "",
                "Категория": "Образование",
                "MCC": 8220.0,
                "Описание": "СПбПУ",
                "Бонусы (включая кэшбэк)": 1,
                "Округление на инвесткопилку": 0,
                "Сумма операции с округлением": 55.0,
            },
        ]
    )
    assert simple_search("Образование") == json.dumps(
        [
            {
                "Дата операции": "12.03.2019 16:51:05",
                "Дата платежа": "13.03.2019",
                "Номер карты": "*7197",
                "Статус": "OK",
                "Сумма операции": -55.0,
                "Валюта операции": "RUB",
                "Сумма платежа": -55.0,
                "Валюта платежа": "RUB",
                "Кэшбэк": "",
                "Категория": "Образование",
                "MCC": 8220.0,
                "Описание": "СПбПУ",
                "Бонусы (включая кэшбэк)": 1,
                "Округление на инвесткопилку": 0,
                "Сумма операции с округлением": 55.0,
            }
        ],
        ensure_ascii=False,
        indent=4,
    )


@patch("pandas.read_excel")
def test_sort_by_phone_numbers(mock_reader: Mock, transactions: list[dict]) -> None:
    qwertu = []
    for transaction in transactions:
        mock_reader.return_value = DataFrame(transaction)
        qwertu.append(sort_by_phone_numbers_main())
    format_object = [
        json.dumps(
            [
                {
                    "Дата операции": "31.01.2019 13:34:15",
                    "Дата платежа": "31.01.2019",
                    "Номер карты": "",
                    "Статус": "OK",
                    "Сумма операции": -35.0,
                    "Валюта операции": "RUB",
                    "Сумма платежа": -35.0,
                    "Валюта платежа": "RUB",
                    "Кэшбэк": "",
                    "Категория": "Мобильная связь",
                    "MCC": "",
                    "Описание": "Teletie Бизнес +7 966 000-00-00",
                    "Бонусы (включая кэшбэк)": 0,
                    "Округление на инвесткопилку": 0,
                    "Сумма операции с округлением": 35.0,
                },
                {
                    "Дата операции": "31.01.2019 13:34:15",
                    "Дата платежа": "31.01.2019",
                    "Номер карты": "",
                    "Статус": "OK",
                    "Сумма операции": -35.0,
                    "Валюта операции": "RUB",
                    "Сумма платежа": -35.0,
                    "Валюта платежа": "RUB",
                    "Кэшбэк": "",
                    "Категория": "Мобильная связь",
                    "MCC": "",
                    "Описание": "Teletie Бизнес +7 966 000-00-00",
                    "Бонусы (включая кэшбэк)": 0,
                    "Округление на инвесткопилку": 0,
                    "Сумма операции с округлением": 35.0,
                },
                {
                    "Дата операции": "30.01.2019 20:34:24",
                    "Дата платежа": "01.02.2019",
                    "Номер карты": "*7197",
                    "Статус": "OK",
                    "Сумма операции": -97.8,
                    "Валюта операции": "RUB",
                    "Сумма платежа": -97.8,
                    "Валюта платежа": "RUB",
                    "Кэшбэк": "",
                    "Категория": "Мобильная связь",
                    "MCC": 5411.0,
                    "Описание": "Teletie Бизнес +7 966 567-00-89",
                    "Бонусы (включая кэшбэк)": 1,
                    "Округление на инвесткопилку": 0,
                    "Сумма операции с округлением": 97.8,
                },
            ],
            ensure_ascii=False,
            indent=4,
        )
    ]
    assert qwertu == format_object


@patch("pandas.read_excel")
def test_simple_search_local(mock_reader: Mock) -> None:
    mock_reader.return_value = DataFrame(
        [
            {
                "Дата операции": "15.06.2024 20:50:22",
                "Дата платежа": "15.06.2024",
                "Номер карты": "*1934",
                "Статус": "OK",
                "Сумма операции": -28.0,
                "Валюта операции": "RUB",
                "Сумма платежа": -28.0,
                "Валюта платежа": "RUB",
                "Кэшбэк": "",
                "Категория": "Транспорт",
                "MCC": 4131.0,
                "Описание": "Единая транспортная карта (etk21)",
                "Бонусы (включая кэшбэк)": 0,
                "Округление на инвесткопилку": 0,
                "Сумма операции с округлением": 28.0,
            },
            {
                "Дата операции": "15.06.2024 15:22:24",
                "Дата платежа": "15.06.2024",
                "Номер карты": "*1934",
                "Статус": "OK",
                "Сумма операции": -94.5,
                "Валюта операции": "RUB",
                "Сумма платежа": -94.5,
                "Валюта платежа": "RUB",
                "Кэшбэк": "",
                "Категория": "Различные товары",
                "MCC": 5331.0,
                "Описание": "Fix Price",
                "Бонусы (включая кэшбэк)": 0,
                "Округление на инвесткопилку": 0,
                "Сумма операции с округлением": 94.5,
            },
        ]
    )
    assert simple_search_local("Различные") == json.dumps(
        [
            {
                "Дата операции": "15.06.2024 15:22:24",
                "Дата платежа": "15.06.2024",
                "Номер карты": "*1934",
                "Статус": "OK",
                "Сумма операции": -94.5,
                "Валюта операции": "RUB",
                "Сумма платежа": -94.5,
                "Валюта платежа": "RUB",
                "Кэшбэк": "",
                "Категория": "Различные товары",
                "MCC": 5331.0,
                "Описание": "Fix Price",
                "Бонусы (включая кэшбэк)": 0,
                "Округление на инвесткопилку": 0,
                "Сумма операции с округлением": 94.5,
            }
        ],
        ensure_ascii=False,
        indent=4,
    )


@patch("pandas.read_excel")
def test_sort_by_phone_numbers_local(mock_reader: Mock, transactions: list[dict]) -> None:
    qwertu = []
    for transaction in transactions:
        mock_reader.return_value = DataFrame(transaction)
        qwertu.append(sort_by_phone_numbers_local())
    format_object = [
        json.dumps(
            [
                {
                    "Дата операции": "31.01.2019 13:34:15",
                    "Дата платежа": "31.01.2019",
                    "Номер карты": "",
                    "Статус": "OK",
                    "Сумма операции": -35.0,
                    "Валюта операции": "RUB",
                    "Сумма платежа": -35.0,
                    "Валюта платежа": "RUB",
                    "Кэшбэк": "",
                    "Категория": "Мобильная связь",
                    "MCC": "",
                    "Описание": "Teletie Бизнес +7 966 000-00-00",
                    "Бонусы (включая кэшбэк)": 0,
                    "Округление на инвесткопилку": 0,
                    "Сумма операции с округлением": 35.0,
                },
                {
                    "Дата операции": "31.01.2019 13:34:15",
                    "Дата платежа": "31.01.2019",
                    "Номер карты": "",
                    "Статус": "OK",
                    "Сумма операции": -35.0,
                    "Валюта операции": "RUB",
                    "Сумма платежа": -35.0,
                    "Валюта платежа": "RUB",
                    "Кэшбэк": "",
                    "Категория": "Мобильная связь",
                    "MCC": "",
                    "Описание": "Teletie Бизнес +7 966 000-00-00",
                    "Бонусы (включая кэшбэк)": 0,
                    "Округление на инвесткопилку": 0,
                    "Сумма операции с округлением": 35.0,
                },
                {
                    "Дата операции": "30.01.2019 20:34:24",
                    "Дата платежа": "01.02.2019",
                    "Номер карты": "*7197",
                    "Статус": "OK",
                    "Сумма операции": -97.8,
                    "Валюта операции": "RUB",
                    "Сумма платежа": -97.8,
                    "Валюта платежа": "RUB",
                    "Кэшбэк": "",
                    "Категория": "Мобильная связь",
                    "MCC": 5411.0,
                    "Описание": "Teletie Бизнес +7 966 567-00-89",
                    "Бонусы (включая кэшбэк)": 1,
                    "Округление на инвесткопилку": 0,
                    "Сумма операции с округлением": 97.8,
                },
            ],
            ensure_ascii=False,
            indent=4,
        )
    ]
    assert qwertu == format_object
